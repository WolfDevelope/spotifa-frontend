/**
 * Service x·ª≠ l√Ω upload file l√™n Cloudinary t·ª´ Frontend
 * S·ª≠ d·ª•ng trong Admin Panel
 */

import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

class CloudinaryUploadService {
  /**
   * Upload b√†i h√°t (audio/video) l√™n Cloudinary
   * @param {File} file - File object t·ª´ input
   * @param {Object} songData - Th√¥ng tin b√†i h√°t
   * @returns {Promise<Object>} Response t·ª´ server
   */
  async uploadSong(file, songData) {
    try {
      // T·∫°o FormData ƒë·ªÉ g·ª≠i file
      const formData = new FormData();
      formData.append('song', file);
      
      // Th√™m th√¥ng tin b√†i h√°t
      Object.keys(songData).forEach(key => {
        if (songData[key] !== null && songData[key] !== undefined) {
          formData.append(key, songData[key]);
        }
      });

      const token = this.getToken();
      const url = `${API_URL}/songs/upload`;
      
      console.log('üîç Upload Debug Info:');
      console.log('- API URL:', url);
      console.log('- Has Token:', !!token);
      console.log('- Token:', token ? token.substring(0, 20) + '...' : 'NO TOKEN');
      console.log('- File:', file.name, file.size, 'bytes');

      // G·ª≠i request
      const response = await axios.post(url, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': `Bearer ${this.getToken()}`
        },
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          );
          console.log(`Upload progress: ${percentCompleted}%`);
          
          // C√≥ th·ªÉ emit event ho·∫∑c callback ·ªü ƒë√¢y
          if (songData.onProgress) {
            songData.onProgress(percentCompleted);
          }
        }
      });

      return response.data;
    } catch (error) {
      console.error('Upload song error:', error);
      throw this.handleError(error);
    }
  }

  /**
   * Upload ·∫£nh cover l√™n Cloudinary
   * @param {File} file - File ·∫£nh
   * @returns {Promise<string>} URL c·ªßa ·∫£nh ƒë√£ upload
   */
  async uploadCover(file) {
    try {
      const formData = new FormData();
      formData.append('cover', file);

      const response = await axios.post(`${API_URL}/upload/cover`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': `Bearer ${this.getToken()}`
        }
      });

      return response.data.url;
    } catch (error) {
      console.error('Upload cover error:', error);
      throw this.handleError(error);
    }
  }

  /**
   * Upload nhi·ªÅu file c√πng l√∫c
   * @param {Array<File>} files - M·∫£ng c√°c file
   * @param {Object} options - T√πy ch·ªçn upload
   * @returns {Promise<Array>} M·∫£ng k·∫øt qu·∫£ upload
   */
  async uploadMultiple(files, options = {}) {
    const uploadPromises = files.map(file => {
      if (this.isAudioVideo(file)) {
        return this.uploadSong(file, options);
      } else if (this.isImage(file)) {
        return this.uploadCover(file);
      } else {
        return Promise.reject(new Error(`Unsupported file type: ${file.type}`));
      }
    });

    try {
      const results = await Promise.all(uploadPromises);
      return results;
    } catch (error) {
      console.error('Upload multiple error:', error);
      throw error;
    }
  }

  /**
   * X√≥a file t·ª´ Cloudinary
   * @param {string} publicId - Public ID c·ªßa file tr√™n Cloudinary
   * @returns {Promise<Object>} Response t·ª´ server
   */
  async deleteFile(publicId) {
    try {
      const response = await axios.delete(`${API_URL}/upload/cloudinary/${publicId}`, {
        headers: {
          'Authorization': `Bearer ${this.getToken()}`
        }
      });

      return response.data;
    } catch (error) {
      console.error('Delete file error:', error);
      throw this.handleError(error);
    }
  }

  /**
   * Ki·ªÉm tra file c√≥ ph·∫£i audio/video kh√¥ng
   * @param {File} file - File object
   * @returns {boolean}
   */
  isAudioVideo(file) {
    const audioVideoTypes = [
      'audio/mpeg', 'audio/mp3', 'audio/wav', 'audio/ogg',
      'video/mp4', 'video/mpeg', 'video/quicktime', 'video/x-msvideo'
    ];
    return audioVideoTypes.includes(file.type);
  }

  /**
   * Ki·ªÉm tra file c√≥ ph·∫£i ·∫£nh kh√¥ng
   * @param {File} file - File object
   * @returns {boolean}
   */
  isImage(file) {
    return file.type.startsWith('image/');
  }

  /**
   * Validate file tr∆∞·ªõc khi upload
   * @param {File} file - File object
   * @param {Object} options - T√πy ch·ªçn validate
   * @returns {Object} { valid: boolean, error: string }
   */
  validateFile(file, options = {}) {
    const {
      maxSize = 100 * 1024 * 1024, // 100MB m·∫∑c ƒë·ªãnh
      allowedTypes = ['audio/*', 'video/*', 'image/*']
    } = options;

    // Ki·ªÉm tra k√≠ch th∆∞·ªõc
    if (file.size > maxSize) {
      return {
        valid: false,
        error: `File qu√° l·ªõn. K√≠ch th∆∞·ªõc t·ªëi ƒëa: ${this.formatFileSize(maxSize)}`
      };
    }

    // Ki·ªÉm tra lo·∫°i file
    const isAllowed = allowedTypes.some(type => {
      if (type.endsWith('/*')) {
        return file.type.startsWith(type.replace('/*', ''));
      }
      return file.type === type;
    });

    if (!isAllowed) {
      return {
        valid: false,
        error: `Lo·∫°i file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${file.type}`
      };
    }

    return { valid: true };
  }

  /**
   * Format k√≠ch th∆∞·ªõc file
   * @param {number} bytes - K√≠ch th∆∞·ªõc t√≠nh b·∫±ng bytes
   * @returns {string} K√≠ch th∆∞·ªõc ƒë√£ format
   */
  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
  }

  /**
   * L·∫•y JWT token t·ª´ localStorage
   * @returns {string} JWT token
   */
  getToken() {
    // Th·ª≠ l·∫•y token tr·ª±c ti·∫øp tr∆∞·ªõc
    const token = localStorage.getItem('token');
    if (token) return token;
    
    // N·∫øu kh√¥ng c√≥, th·ª≠ l·∫•y t·ª´ user object
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    return user.token || '';
  }

  /**
   * X·ª≠ l√Ω l·ªói t·ª´ API
   * @param {Error} error - Error object
   * @returns {Error} Error ƒë√£ x·ª≠ l√Ω
   */
  handleError(error) {
    if (error.response) {
      // Server tr·∫£ v·ªÅ l·ªói
      const message = error.response.data?.message || 'Upload failed';
      return new Error(message);
    } else if (error.request) {
      // Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response
      return new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
    } else {
      // L·ªói kh√°c
      return error;
    }
  }
}

// Export singleton instance
const cloudinaryUploadService = new CloudinaryUploadService();
export default cloudinaryUploadService;

// Export class ƒë·ªÉ c√≥ th·ªÉ t·∫°o instance m·ªõi n·∫øu c·∫ßn
export { CloudinaryUploadService };
